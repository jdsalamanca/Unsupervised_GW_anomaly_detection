class LowDimVAE(nn.Module):
    def __init__(self, in_ch: int):
        super(LowDimVAE,self).__init__()

        ##Encoder:
        self.conv1=nn.Conv1d(in_ch,64,10)
        self.conv11=nn.Conv1d(64,64,10)
        self.conv111=nn.Conv1d(64,64, 10)
        self.max1=nn.MaxPool1d(2,2)
        self.conv2=nn.Conv1d(64,128,8)
        self.conv22=nn.Conv1d(128,128,8)
        self.conv222=nn.Conv1d(128,128,8)
        self.max2=nn.MaxPool1d(2,2)
        self.conv3=nn.Conv1d(128,256,8)
        self.conv33=nn.Conv1d(256,256,8)
        self.conv333=nn.Conv1d(256,256,8)
        self.max3=nn.MaxPool1d(2,2)
        self.conv4=nn.Conv1d(256,512,8)
        self.conv44=nn.Conv1d(512,512,8)
        self.conv444=nn.Conv1d(512,512,8)
        self.max4=nn.MaxPool1d(2,2)
        self.conv5=nn.Conv1d(512,512,6)
        self.conv55=nn.Conv1d(512,512,6)
        self.conv555=nn.Conv1d(512,512,6)
        self.max5=nn.MaxPool1d(2,2)
        self.conv6=nn.Conv1d(512,512,4)
        self.conv66=nn.Conv1d(512,512,4)
        self.conv666=nn.Conv1d(512,512,4)


        ##Gaussian distribution:
        self.mu=nn.Linear(485,485)
        self.sigma=nn.Linear(485,485)
        self.D=torch.distributions.Normal(0, 1)
        self.D.loc=self.D.loc.cuda()
        self.D.scale=self.D.scale.cuda()
        self.KL=0
        self.z=0

        ##Decoder:
        self.deconv1=nn.ConvTranspose1d(512,512,4)
        self.deconv11=nn.ConvTranspose1d(512,512,4)
        self.deconv111=nn.ConvTranspose1d(512,512,4)
        self.up1=nn.Upsample(scale_factor=2)
        self.deconv2=nn.ConvTranspose1d(512,512,6)
        self.deconv22=nn.ConvTranspose1d(512,512,6)
        self.deconv222=nn.ConvTranspose1d(512,512,6)
        self.up2=nn.Upsample(scale_factor=2)
        self.deconv3=nn.ConvTranspose1d(512,512,7)
        self.deconv33=nn.ConvTranspose1d(512,512,8)
        self.deconv333=nn.ConvTranspose1d(512,256,8)
        self.up3=nn.Upsample(scale_factor=2)
        self.deconv4=nn.ConvTranspose1d(256,256,8)
        self.deconv44=nn.ConvTranspose1d(256,256,8)
        self.deconv444=nn.ConvTranspose1d(256,128,10)
        self.up4=nn.Upsample(scale_factor=2)
        self.deconv5=nn.ConvTranspose1d(128,128,10)
        self.deconv55=nn.ConvTranspose1d(128,128,10)
        self.deconv555=nn.ConvTranspose1d(128,64,10)
        self.up5=nn.Upsample(scale_factor=2)
        self.deconv6=nn.ConvTranspose1d(64,64,11)
        self.deconv66=nn.ConvTranspose1d(64,64,11)
        self.deconv666=nn.ConvTranspose1d(64,2,11)


    def forward(self,x):
        ## Encoder:
        x=self.conv1(x)
        x=F.leaky_relu(x)
        x=self.conv11(x)
        x=F.leaky_relu(x)
        x=self.conv111(x)
        x=F.leaky_relu(x)
        x=self.max1(x)
        x=self.conv2(x)
        x=F.leaky_relu(x)
        x=self.conv22(x)
        x=F.leaky_relu(x)
        x=self.conv222(x)
        x=F.leaky_relu(x)
        x=self.max2(x)
        x=self.conv3(x)
        x=F.leaky_relu(x)
        x=self.conv33(x)
        x=F.leaky_relu(x)
        x=self.conv333(x)
        x=F.leaky_relu(x)
        x=self.max3(x)
        x=self.conv4(x)
        x=F.leaky_relu(x)
        x=self.conv44(x)
        x=F.leaky_relu(x)
        x=self.conv444(x)
        x=F.leaky_relu(x)
        x=self.max4(x)
        x=self.conv5(x)
        x=F.leaky_relu(x)
        x=self.conv55(x)
        x=F.leaky_relu(x)
        x=self.conv555(x)
        x=F.leaky_relu(x)
        x=self.max5(x)
        x=self.conv6(x)
        x=F.leaky_relu(x)
        x=self.conv66(x)
        x=F.leaky_relu(x)
        x=self.conv666(x)
        x=F.leaky_relu(x,negative_slope=0.9)


        #print("Encoder output:", x)

        ##Sampling form Gaussian distribution:
        sigma=torch.sigmoid(self.sigma(x))
        mu=torch.sigmoid(self.mu(x))
        sample=self.D.sample(sigma.shape)
        z=mu+sigma*sample
        mu2_m=torch.mean(mu**2)
        sigma2_m=torch.mean(sigma**2)
        kl=self.KL=mu2_m+sigma2_m-torch.log(sigma2_m)-1

        ##Decoder:
        x=self.deconv1(z)
        x=F.leaky_relu(x)
        x=self.deconv11(x)
        x=F.leaky_relu(x)
        x=self.deconv111(x)
        x=F.leaky_relu(x)
        x=self.up1(x)
        x=self.deconv2(x)
        x=F.leaky_relu(x)
        x=self.deconv22(x)
        x=F.leaky_relu(x)
        x=self.deconv222(x)
        x=F.leaky_relu(x)
        x=self.up2(x)
        x=self.deconv3(x)
        x=F.leaky_relu(x)
        x=self.deconv33(x)
        x=F.leaky_relu(x)
        x=self.deconv333(x)
        x=F.leaky_relu(x)
        x=self.up3(x)
        x=self.deconv4(x)
        x=F.leaky_relu(x)
        x=self.deconv44(x)
        x=F.leaky_relu(x)
        x=self.deconv444(x)
        x=F.leaky_relu(x)
        x=self.up4(x)
        x=self.deconv5(x)
        x=F.leaky_relu(x)
        x=self.deconv55(x)
        x=F.leaky_relu(x)
        x=self.deconv555(x)
        x=F.leaky_relu(x)
        x=self.up5(x)
        x=self.deconv6(x)
        x=F.leaky_relu(x)
        x=self.deconv66(x)
        x=F.leaky_relu(x)
        x=self.deconv666(x)
        x=F.tanh(x)
        return x
